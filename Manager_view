import React, { useState, useEffect } from 'react';
import { Check, X, Eye, DollarSign, TrendingUp, Users, FileText, AlertCircle } from 'lucide-react';

const ManagerDashboard = () => {
  const [expenses, setExpenses] = useState([]);
  const [teamBudgets, setTeamBudgets] = useState([]);
  const [companyCurrency, setCompanyCurrency] = useState('USD');
  const [exchangeRates, setExchangeRates] = useState({});
  const [activeTab, setActiveTab] = useState('pending');
  const [selectedExpense, setSelectedExpense] = useState(null);
  const [confirmAction, setConfirmAction] = useState(null);
  const [comment, setComment] = useState('');

  useEffect(() => {
    setCompanyCurrency('USD');
    fetchExchangeRates('USD');

    setExpenses([
      {
        id: 1,
        subject: 'Client Dinner at The Grand Hotel',
        requestOwner: 'John Doe',
        employeeId: 'EMP001',
        teamName: 'Sales',
        category: 'Food & Beverage',
        amount: 15000,
        currency: 'INR',
        date: '2025-10-01',
        status: 'pending',
        description: 'Business dinner with potential clients',
        isManagerApprover: true,
        currentApproverStep: 1,
        approvalSequence: ['Manager', 'Finance', 'Director']
      },
      {
        id: 2,
        subject: 'Flight to Mumbai for Conference',
        requestOwner: 'Sarah Smith',
        employeeId: 'EMP002',
        teamName: 'Engineering',
        category: 'Travel',
        amount: 450,
        currency: 'USD',
        date: '2025-09-28',
        status: 'pending',
        description: 'Annual tech conference attendance',
        isManagerApprover: true,
        currentApproverStep: 1,
        approvalSequence: ['Manager', 'Finance']
      },
      {
        id: 3,
        subject: 'Office Supplies - Stationery',
        requestOwner: 'Mike Johnson',
        employeeId: 'EMP003',
        teamName: 'Marketing',
        category: 'Office Supplies',
        amount: 75,
        currency: 'USD',
        date: '2025-10-02',
        status: 'pending',
        description: 'Monthly office supplies purchase',
        isManagerApprover: true,
        currentApproverStep: 1,
        approvalSequence: ['Manager']
      },
      {
        id: 4,
        subject: 'Medical Checkup - Annual Health',
        requestOwner: 'Emily Brown',
        employeeId: 'EMP004',
        teamName: 'Operations',
        category: 'Healthcare',
        amount: 200,
        currency: 'EUR',
        date: '2025-09-25',
        status: 'approved',
        description: 'Annual health checkup as per policy',
        isManagerApprover: true,
        approvedBy: 'Manager',
        approvalDate: '2025-09-26'
      },
      {
        id: 5,
        subject: 'Team Building Event - Bowling',
        requestOwner: 'David Lee',
        employeeId: 'EMP005',
        teamName: 'Sales',
        category: 'Entertainment',
        amount: 5000,
        currency: 'INR',
        date: '2025-09-30',
        status: 'rejected',
        description: 'Monthly team building activity',
        isManagerApprover: true,
        rejectedBy: 'Manager',
        rejectionDate: '2025-10-01',
        rejectionReason: 'Budget exceeded for this quarter'
      }
    ]);

    setTeamBudgets([
      { team: 'Engineering', budget: 50000, spent: 32500, currency: 'USD' },
      { team: 'Sales', budget: 75000, spent: 68200, currency: 'USD' },
      { team: 'Marketing', budget: 40000, spent: 25800, currency: 'USD' },
      { team: 'Operations', budget: 30000, spent: 18900, currency: 'USD' }
    ]);
  }, []);

  const fetchExchangeRates = async (baseCurrency) => {
    try {
      const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${baseCurrency}`);
      const data = await response.json();
      setExchangeRates(data.rates);
    } catch (error) {
      console.error('Error fetching exchange rates:', error);
      setExchangeRates({ USD: 1, EUR: 0.85, INR: 83, GBP: 0.73 });
    }
  };

  const convertToCompanyCurrency = (amount, fromCurrency) => {
    if (fromCurrency === companyCurrency) return amount;
    const amountInUSD = amount / (exchangeRates[fromCurrency] || 1);
    const convertedAmount = amountInUSD * (exchangeRates[companyCurrency] || 1);
    return convertedAmount;
  };

  const formatCurrency = (amount, currency) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };

  const handleApprove = (expenseId) => {
    const expense = expenses.find(e => e.id === expenseId);
    const convertedAmount = convertToCompanyCurrency(expense.amount, expense.currency);
    
    setTeamBudgets(teamBudgets.map(team => 
      team.team === expense.teamName 
        ? { ...team, spent: team.spent + convertedAmount }
        : team
    ));

    setExpenses(expenses.map(exp => 
      exp.id === expenseId 
        ? { 
            ...exp, 
            status: 'approved', 
            approvedBy: 'Manager',
            approvalDate: new Date().toISOString().split('T')[0],
            comment: comment
          } 
        : exp
    ));
    
    setComment('');
    setConfirmAction(null);
    setSelectedExpense(null);
  };

  const handleReject = (expenseId) => {
    setExpenses(expenses.map(exp => 
      exp.id === expenseId 
        ? { 
            ...exp, 
            status: 'rejected', 
            rejectedBy: 'Manager',
            rejectionDate: new Date().toISOString().split('T')[0],
            rejectionReason: comment || 'No reason provided'
          } 
        : exp
    ));
    setComment('');
    setConfirmAction(null);
    setSelectedExpense(null);
  };

  const getStatusBadge = (status) => {
    const styles = {
      pending: 'bg-yellow-100 text-yellow-800 border-yellow-300',
      approved: 'bg-green-100 text-green-800 border-green-300',
      rejected: 'bg-red-100 text-red-800 border-red-300'
    };
    return styles[status] || styles.pending;
  };

  const getCategoryIcon = (category) => {
    switch(category) {
      case 'Food & Beverage': return '🍽️';
      case 'Travel': return '✈️';
      case 'Healthcare': return '🏥';
      case 'Office Supplies': return '📎';
      case 'Entertainment': return '🎉';
      default: return '📄';
    }
  };

  const filteredExpenses = expenses.filter(exp => {
    if (activeTab === 'pending') return exp.status === 'pending';
    if (activeTab === 'approved') return exp.status === 'approved';
    if (activeTab === 'rejected') return exp.status === 'rejected';
    return true;
  });

  const totalPendingAmount = expenses
    .filter(exp => exp.status === 'pending')
    .reduce((sum, exp) => sum + convertToCompanyCurrency(exp.amount, exp.currency), 0);

  return (
    <div className="h-screen bg-gradient-to-br from-blue-50 via-cyan-50 to-teal-50 overflow-hidden flex flex-col">
      <div className="bg-white shadow-md border-b border-blue-200" style={{ backgroundColor: '#ADE8F4' }}>
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Manager Dashboard</h1>
              <p className="text-sm text-gray-700 mt-1">Expense Approval & Team Management</p>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-700">Company Currency</p>
              <p className="text-xl font-bold text-gray-900">{companyCurrency}</p>
            </div>
          </div>
        </div>
      </div>

      <div className="flex-1 overflow-hidden p-6">
        <div className="h-full flex flex-col gap-4">
          <div className="grid grid-cols-4 gap-4">
            <div className="bg-white rounded-lg shadow-md p-4 border-2 border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-gray-600 font-medium">Pending Approvals</p>
                  <p className="text-2xl font-bold text-yellow-600 mt-1">
                    {expenses.filter(e => e.status === 'pending').length}
                  </p>
                </div>
                <FileText className="w-8 h-8 text-yellow-500" />
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-md p-4 border-2 border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-gray-600 font-medium">Pending Amount</p>
                  <p className="text-xl font-bold text-blue-600 mt-1">
                    {formatCurrency(totalPendingAmount, companyCurrency)}
                  </p>
                </div>
                <DollarSign className="w-8 h-8 text-blue-500" />
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-md p-4 border-2 border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-gray-600 font-medium">Approved This Month</p>
                  <p className="text-2xl font-bold text-green-600 mt-1">
                    {expenses.filter(e => e.status === 'approved').length}
                  </p>
                </div>
                <Check className="w-8 h-8 text-green-500" />
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-md p-4 border-2 border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs text-gray-600 font-medium">Team Members</p>
                  <p className="text-2xl font-bold text-purple-600 mt-1">24</p>
                </div>
                <Users className="w-8 h-8 text-purple-500" />
              </div>
            </div>
          </div>

          <div className="flex-1 grid grid-cols-3 gap-4 overflow-hidden">
            <div className="col-span-2 bg-white rounded-lg shadow-md border-2 border-blue-200 flex flex-col overflow-hidden">
              <div className="border-b" style={{ backgroundColor: '#ADE8F4' }}>
                <div className="flex space-x-6 px-4">
                  {['pending', 'approved', 'rejected', 'all'].map(tab => (
                    <button
                      key={tab}
                      onClick={() => setActiveTab(tab)}
                      className={`py-3 px-2 font-medium text-sm border-b-2 transition-colors ${
                        activeTab === tab
                          ? 'border-blue-700 text-blue-900'
                          : 'border-transparent text-gray-700 hover:text-gray-900'
                      }`}
                    >
                      {tab.charAt(0).toUpperCase() + tab.slice(1)}
                      <span className="ml-2 bg-white text-gray-700 py-0.5 px-2 rounded-full text-xs font-semibold">
                        {expenses.filter(e => tab === 'all' || e.status === tab).length}
                      </span>
                    </button>
                  ))}
                </div>
              </div>

              <div className="flex-1 overflow-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b sticky top-0">
                    <tr>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Subject</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Owner</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Team</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Category</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Amount</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Status</th>
                      <th className="px-3 py-2 text-left text-xs font-bold text-gray-700 uppercase">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredExpenses.map((expense) => {
                      const convertedAmount = convertToCompanyCurrency(expense.amount, expense.currency);
                      const isPending = expense.status === 'pending';
                      
                      return (
                        <tr key={expense.id} className="hover:bg-blue-50 transition-colors">
                          <td className="px-3 py-2">
                            <div className="flex items-center">
                              <span className="text-xl mr-2">{getCategoryIcon(expense.category)}</span>
                              <div>
                                <div className="text-sm font-medium text-gray-900">{expense.subject}</div>
                                <div className="text-xs text-gray-500">{expense.date}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-3 py-2">
                            <div className="text-sm text-gray-900">{expense.requestOwner}</div>
                            <div className="text-xs text-gray-500">{expense.employeeId}</div>
                          </td>
                          <td className="px-3 py-2">
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded">
                              {expense.teamName}
                            </span>
                          </td>
                          <td className="px-3 py-2">
                            <div className="text-sm text-gray-900">{expense.category}</div>
                          </td>
                          <td className="px-3 py-2">
                            <div className="text-sm font-bold text-gray-900">
                              {formatCurrency(convertedAmount, companyCurrency)}
                            </div>
                            {expense.currency !== companyCurrency && (
                              <div className="text-xs text-gray-500">
                                {formatCurrency(expense.amount, expense.currency)}
                              </div>
                            )}
                          </td>
                          <td className="px-3 py-2">
                            <span className={`px-2 py-1 inline-flex text-xs font-bold rounded-full border ${getStatusBadge(expense.status)}`}>
                              {expense.status.toUpperCase()}
                            </span>
                          </td>
                          <td className="px-3 py-2">
                            {isPending ? (
                              <div className="flex gap-2">
                                <button
                                  onClick={() => {
                                    setSelectedExpense(expense);
                                    setConfirmAction('approve');
                                  }}
                                  className="text-white bg-green-600 hover:bg-green-700 font-medium px-3 py-1 rounded flex items-center text-xs"
                                >
                                  <Check className="w-3 h-3 mr-1" />
                                  Approve
                                </button>
                                <button
                                  onClick={() => {
                                    setSelectedExpense(expense);
                                    setConfirmAction('reject');
                                  }}
                                  className="text-white bg-red-600 hover:bg-red-700 font-medium px-3 py-1 rounded flex items-center text-xs"
                                >
                                  <X className="w-3 h-3 mr-1" />
                                  Reject
                                </button>
                              </div>
                            ) : (
                              <button
                                onClick={() => setSelectedExpense(expense)}
                                className="text-blue-700 hover:text-blue-900 font-medium flex items-center text-xs"
                              >
                                <Eye className="w-3 h-3 mr-1" />
                                View
                              </button>
                            )}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>

              {filteredExpenses.length === 0 && (
                <div className="text-center py-8">
                  <FileText className="w-10 h-10 text-gray-400 mx-auto mb-3" />
                  <p className="text-gray-500 text-sm">No expenses found</p>
                </div>
              )}
            </div>

            <div className="bg-white rounded-lg shadow-md border-2 border-blue-200 flex flex-col overflow-hidden">
              <div className="px-4 py-3 border-b" style={{ backgroundColor: '#ADE8F4' }}>
                <div className="flex items-center">
                  <TrendingUp className="w-5 h-5 text-gray-800 mr-2" />
                  <h2 className="text-lg font-bold text-gray-900">Team Budgets</h2>
                </div>
              </div>
              <div className="flex-1 overflow-auto p-4 space-y-4">
                {teamBudgets.map((team, idx) => {
                  const percentage = (team.spent / team.budget) * 100;
                  const isOverBudget = percentage > 90;
                  return (
                    <div key={idx} className="border-2 border-blue-200 rounded-lg p-3 bg-gradient-to-br from-white to-blue-50">
                      <h3 className="font-bold text-gray-900 mb-2 text-sm">{team.team}</h3>
                      <div className="space-y-2">
                        <div className="flex justify-between text-xs">
                          <span className="text-gray-600 font-medium">Budget:</span>
                          <span className="font-bold text-gray-900">{formatCurrency(team.budget, team.currency)}</span>
                        </div>
                        <div className="flex justify-between text-xs">
                          <span className="text-gray-600 font-medium">Spent:</span>
                          <span className="font-bold text-gray-900">{formatCurrency(team.spent, team.currency)}</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-3 mt-2 border border-gray-300">
                          <div 
                            className={`h-full rounded-full transition-all duration-500 ${isOverBudget ? 'bg-gradient-to-r from-red-500 to-red-600' : 'bg-gradient-to-r from-blue-500 to-cyan-500'}`}
                            style={{ width: `${Math.min(percentage, 100)}%` }}
                          ></div>
                        </div>
                        <p className={`text-sm font-bold ${isOverBudget ? 'text-red-600' : 'text-blue-700'}`}>
                          {percentage.toFixed(1)}% Utilized
                        </p>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>

      {selectedExpense && confirmAction && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full shadow-2xl border-4" style={{ borderColor: '#ADE8F4' }}>
            <div className="px-6 py-4 border-b flex items-center" style={{ backgroundColor: '#ADE8F4' }}>
              <AlertCircle className="w-6 h-6 text-gray-800 mr-3" />
              <h2 className="text-xl font-bold text-gray-900">
                Confirm {confirmAction === 'approve' ? 'Approval' : 'Rejection'}
              </h2>
            </div>

            <div className="p-6 max-h-96 overflow-y-auto">
              <div className="bg-blue-50 border-2 border-blue-200 rounded-lg p-4 mb-4">
                <p className="text-sm font-semibold text-gray-700 mb-3">
                  You are about to {confirmAction} the following expense:
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-xs font-bold text-gray-600">Subject</label>
                  <p className="text-sm font-semibold text-gray-900 mt-1">{selectedExpense.subject}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Employee</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.requestOwner}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Team</label>
                  <p className="text-sm text-gray-900 mt-1">
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded">
                      {selectedExpense.teamName}
                    </span>
                  </p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Category</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.category}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Date</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.date}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Amount</label>
                  <p className="text-lg font-bold text-gray-900 mt-1">
                    {formatCurrency(convertToCompanyCurrency(selectedExpense.amount, selectedExpense.currency), companyCurrency)}
                  </p>
                </div>
              </div>

              <div className="mt-4">
                <label className="text-xs font-bold text-gray-600">Description</label>
                <p className="text-sm text-gray-900 mt-1 p-3 bg-gray-50 rounded-lg border border-gray-200">
                  {selectedExpense.description}
                </p>
              </div>

              <div className="mt-4">
                <label className="text-xs font-bold text-gray-600">Add Comment (Optional)</label>
                <textarea
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  className="w-full mt-2 p-3 border-2 border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  rows="2"
                  placeholder="Add your comments..."
                />
              </div>
            </div>

            <div className="px-6 py-4 border-t bg-gray-50 flex gap-3">
              <button
                onClick={() => {
                  setConfirmAction(null);
                  setComment('');
                }}
                className="flex-1 bg-gray-500 text-white py-3 px-4 rounded-lg font-bold hover:bg-gray-600 transition-colors"
              >
                Go Back
              </button>
              <button
                onClick={() => confirmAction === 'approve' ? handleApprove(selectedExpense.id) : handleReject(selectedExpense.id)}
                className={`flex-1 text-white py-3 px-4 rounded-lg font-bold transition-colors ${
                  confirmAction === 'approve' 
                    ? 'bg-green-600 hover:bg-green-700' 
                    : 'bg-red-600 hover:bg-red-700'
                }`}
              >
                {confirmAction === 'approve' ? 'Confirm Approval' : 'Confirm Rejection'}
              </button>
            </div>
          </div>
        </div>
      )}

      {selectedExpense && !confirmAction && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full shadow-2xl border-4" style={{ borderColor: '#ADE8F4' }}>
            <div className="px-6 py-4 border-b flex justify-between items-center" style={{ backgroundColor: '#ADE8F4' }}>
              <h2 className="text-xl font-bold text-gray-900">Expense Details</h2>
              <button
                onClick={() => setSelectedExpense(null)}
                className="text-gray-700 hover:text-gray-900 font-bold"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-6 max-h-96 overflow-y-auto space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-xs font-bold text-gray-600">Subject</label>
                  <p className="text-sm font-semibold text-gray-900 mt-1">{selectedExpense.subject}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Status</label>
                  <p className="mt-1">
                    <span className={`px-3 py-1 inline-flex text-xs font-bold rounded-full border ${getStatusBadge(selectedExpense.status)}`}>
                      {selectedExpense.status.toUpperCase()}
                    </span>
                  </p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Employee</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.requestOwner}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Team</label>
                  <p className="text-sm text-gray-900 mt-1">
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded">
                      {selectedExpense.teamName}
                    </span>
                  </p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Category</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.category}</p>
                </div>
                <div>
                  <label className="text-xs font-bold text-gray-600">Date</label>
                  <p className="text-sm text-gray-900 mt-1">{selectedExpense.date}</p>
                </div>
                <div className="col-span-2">
                  <label className="text-xs font-bold text-gray-600">Amount</label>
                  <p className="text-lg font-bold text-gray-900 mt-1">
                    {formatCurrency(convertToCompanyCurrency(selectedExpense.amount, selectedExpense.currency), companyCurrency)}
                  </p>
                </div>
              </div>

              <div>
                <label className="text-xs font-bold text-gray-600">Description</label>
                <p className="text-sm text-gray-900 mt-1 p-3 bg-gray-50 rounded-lg border border-gray-200">
                  {selectedExpense.description}
                </p>
              </div>

              {selectedExpense.status === 'approved' && (
                <div className="bg-green-50 border-2 border-green-300 rounded-lg p-3">
                  <p className="text-sm text-green-800 font-semibold">
                    Approved by {selectedExpense.approvedBy} on {selectedExpense.approvalDate}
                  </p>
                </div>
              )}

              {selectedExpense.status === 'rejected' && (
                <div className="bg-red-50 border-2 border-red-300 rounded-lg p-3">
                  <p className="text-sm text-red-800 font-semibold">
                    Rejected by {selectedExpense.rejectedBy} on {selectedExpense.rejectionDate}
                  </p>
                  <p className="text-sm text-red-800 mt-1">
                    Reason: {selectedExpense.rejectionReason}
                  </p>
                </div>
              )}
            </div>

            <div className="px-6 py-4 border-t bg-gray-50">
              <button
                onClick={() => setSelectedExpense(null)}
                className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-bold hover:bg-blue-700 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManagerDashboard;
